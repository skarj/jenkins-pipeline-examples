#!/usr/bin/env groovy

properties([
    parameters([
        [
            $class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select version to deploy',
            filterLength: 1,
            filterable: false,
            name: 'VERSION',
            randomName: 'choice-parameter-1306749608628312',
            // referencedParameters: 'PARAMETER',
            script: [
                $class: 'GroovyScript',
                script: [
                    classpath: [],
                    sandbox: false,
                    script: 'def list = [\'/bin/bash\', \'-c\', "/usr/bin/curl http://nexus.example.com/nexus/service/local/lucene/search\\\\?g\\\\=com.example\\\\&repositoryId=releases\\\\&a\\\\=\\"artifactname\\"\\\\ | grep version | awk \\\'{ gsub(\\"</*version>\\", \\"\\"); print }\\\' | xargs"].execute().text.tokenize(\' \')'
                ],
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: 'return[\'Script error\']'
                ]
            ]
        ]
    ])
])

pipeline {

    agent none

    options {
        // persist artifacts and console output for the specific number of recent Pipeline runs
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr:'10'))
        // skip checking out code from source control by default in the agent directive
        skipDefaultCheckout()
        // disallow concurrent executions of the Pipeline
        disableConcurrentBuilds()
        // make sure that this build doesn't hang forever
        timeout(time: 60, unit: 'MINUTES')
        // prepend all console output generated by the Pipeline run with the time at which the line was emitted
        timestamps()
        // skip stages once the build status has gone to UNSTABLE
        //skipStagesAfterUnstable
        // on failure, retry the entire Pipeline the specified number of times
        //retry(3)
        ansiColor('xterm')
    }

    stages {

        stage('Checkout deploy scripts') {
            agent { label 'node01' }
            steps {
                hipchatSend color: "PURPLE", notify: false, message: "${env.JOB_NAME} #${env.BUILD_NUMBER} started... (<a href='${BUILD_URL}'>Details</a>)", room: 'Project', sendAs: 'Jenkins', v2enabled: false
                // clean workspace
                deleteDir()

                checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: "master"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [],
                    submoduleCfg                     : [],
                    userRemoteConfigs                : [[url: 'ssh://git@bitbucket.examle.com/scripts.git']]]
                )
            }
        }

        stage('STG: approve deploy') {
            agent none
            steps {
                script {
                    env.DEPLOY_STG = input message: 'User input required',
                        parameters: [choice(name: 'Continue with deploy to STG env', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy version to STG')]
                }
            }
        }

        stage('STG: Deploy') {
            agent { label 'node01' }
            when {
                environment name: 'DEPLOY_STG', value: 'yes'
            }
            steps {
                sshagent (credentials: ['ssh_user']) {
                    withCredentials([file(credentialsId: 'ansible_vault_file', variable: 'VAULT_TOKEN')]) {
                        sh """
                            source ~/ansible26/bin/activate && ansible --version
                            ansible-playbook deploy.yml -i hosts/stg.ini --vault-password-file ${VAULT_TOKEN} -e \"version=${params.VERSION}\"
                        """
                    }
                }
            }
        }

        stage('PROD: approve deploy') {
            agent none
            steps {
                script {
                    env.DEPLOY_PROD = input message: 'User input required',
                        parameters: [choice(name: 'Continue with deploy to PROD env', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy version to PROD')]
                }
            }
        }

        stage('PROD: Deploy') {
            agent { label 'node01' }
            when {
                environment name: 'DEPLOY_PROD', value: 'yes'
            }
            steps {
                sshagent (credentials: ['ssh_user']) {
                    withCredentials([file(credentialsId: 'ansible_vault_file', variable: 'VAULT_TOKEN')]) {
                        sh """
                            source ~/ansible26/bin/activate && ansible --version
                            ansible-playbook deploy.yml -i hosts/prod.ini --vault-password-file ${VAULT_TOKEN} -e \"version=${params.VERSION}\"
                        """
                    }
                }
            }
        }
    }

    post {

        success {
            hipchatSend color: "GREEN", notify: false, message: "${env.JOB_NAME} #${env.BUILD_NUMBER} completed successfully. (<a href='${BUILD_URL}'>Details</a>)", room: 'Project', sendAs: 'Jenkins', v2enabled: false
        }

        failure {
            hipchatSend color: "RED", notify: true, message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed. (<a href='${BUILD_URL}'>Details</a>)", room: 'Project', sendAs: 'Jenkins', v2enabled: false
        }
    }
}
